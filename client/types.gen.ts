// This file is auto-generated by @hey-api/openapi-ts

export type AssetVersionMetadata = {
    /**
     * The metadata category (e.g., Camera, Creator)
     */
    category: string;
    /**
     * The technical field name
     */
    fieldName: string;
    /**
     * Human-readable label for the field
     */
    label: string;
    /**
     * Data type of the metadata value
     */
    type: string;
    /**
     * The actual metadata value
     */
    data: string | Array<string>;
};

export type Tag = {
    /**
     * Unique identifier for the tag
     */
    id: string;
    /**
     * Tag name
     */
    name: string;
};

export type AssetUrls = {
    /**
     * URL for the thumbnail image
     */
    thumbnail: string;
    /**
     * URL for the preview image
     */
    preview: string;
};

export type GetAssetVersionResponse = {
    /**
     * Unique identifier for the asset version
     */
    id: string;
    /**
     * Original file name
     */
    fileName: string;
    /**
     * Asset description
     */
    description?: string;
    /**
     * File extension
     */
    ext?: string;
    /**
     * Asset title
     */
    title?: string;
    /**
     * Asset type (e.g., photo, video, document)
     */
    type: string;
    /**
     * When the asset was created
     */
    createdAt: string;
    /**
     * When the asset was uploaded
     */
    uploadedAt: string;
    /**
     * Width in pixels (for images/videos)
     */
    width?: number;
    /**
     * Height in pixels (for images/videos)
     */
    height?: number;
    /**
     * File size in bytes
     */
    size: number;
    /**
     * Asset metadata fields
     */
    metadata?: Array<AssetVersionMetadata>;
    /**
     * Tags associated with the asset
     */
    tags?: Array<Tag>;
    urls: AssetUrls;
};

export type ListAssetsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The maximum number of assets to return in the response
         */
        limit?: number;
        /**
         * Cursor to the next page of assets
         */
        cursor?: string;
        /**
         * The parent board ID of the assets to return
         */
        parentBoardId?: string;
        /**
         * Filter assets by attached tags. If multiple `tag=value` pairs are provided, only assets with all specified tags will be included.
         */
        tag?: string;
    };
    url: '/v1/assets';
};

export type ListAssetsErrors = {
    /**
     * Default
     */
    default: {
        data?: Array<{
            id?: string;
            customFields?: Array<{
                id?: string;
                name?: string;
                type?: string;
                values?: Array<{
                    id?: string;
                    name?: string;
                }>;
            }>;
            coverVersion?: {
                id?: string;
                fileName?: string;
                description?: string;
                ext?: string;
                title?: string;
                type?: string;
                createdAt?: string;
                uploadedAt?: string;
                fileCreatedAt?: string;
                width?: number;
                height?: number;
                size?: number;
                tags?: Array<{
                    id?: string;
                    label?: string;
                }>;
                urls?: {
                    thumbnail?: string;
                    preview?: string;
                };
            };
        }>;
        pagination?: {
            hasMore?: boolean;
            cursor?: unknown;
        };
        total?: number;
    };
};

export type ListAssetsError = ListAssetsErrors[keyof ListAssetsErrors];

export type ListAssetsResponses = {
    /**
     * Filter by tag
     */
    200: {
        data?: Array<{
            id?: string;
            customFields?: Array<{
                id?: string;
                name?: string;
                type?: string;
                values?: Array<{
                    id?: string;
                    name?: string;
                }>;
            }>;
            coverVersion?: {
                id?: string;
                fileName?: string;
                description?: string;
                ext?: string;
                title?: string;
                type?: string;
                createdAt?: string;
                uploadedAt?: string;
                fileCreatedAt?: string;
                width?: number;
                height?: number;
                size?: number;
                tags?: Array<{
                    id?: string;
                    label?: string;
                }>;
                urls?: {
                    thumbnail?: string;
                    preview?: string;
                };
            };
        }>;
        pagination?: {
            hasMore?: boolean;
            cursor?: unknown;
        };
        total?: number;
    };
};

export type ListAssetsResponse = ListAssetsResponses[keyof ListAssetsResponses];

export type DeleteAssetData = {
    body?: never;
    path: {
        assetId: string;
    };
    query?: never;
    url: '/v1/assets/{assetId}';
};

export type DeleteAssetResponses = {
    /**
     * Default
     */
    204: void;
};

export type DeleteAssetResponse = DeleteAssetResponses[keyof DeleteAssetResponses];

export type GetAssetData = {
    body?: never;
    path: {
        assetId: string;
    };
    query?: never;
    url: '/v1/assets/{assetId}';
};

export type GetAssetResponses = {
    /**
     * Default
     */
    default: {
        id?: string;
        customFields?: Array<{
            id?: string;
            name?: string;
            type?: string;
            values?: Array<{
                id?: string;
                name?: string;
            }>;
        }>;
        coverVersion?: {
            id?: string;
            fileName?: string;
            description?: string;
            ext?: string;
            title?: string;
            type?: string;
            createdAt?: string;
            uploadedAt?: string;
            fileCreatedAt?: string;
            width?: number;
            height?: number;
            size?: number;
            tags?: Array<{
                id?: string;
                label?: string;
            }>;
            urls?: {
                thumbnail?: string;
                preview?: string;
            };
        };
    };
};

export type GetAssetResponse = GetAssetResponses[keyof GetAssetResponses];

export type SetAssetCustomFieldData = {
    body?: never;
    path: {
        /**
         * the id of the asset
         */
        assetId: string;
        /**
         * the id of the custom field
         */
        customFieldId: string;
    };
    query?: never;
    url: '/v1/assets/{assetId}/customfields/{customFieldId}';
};

export type SetAssetCustomFieldResponses = {
    /**
     * single-select
     */
    200: {
        [key: string]: unknown;
    };
};

export type SetAssetCustomFieldResponse = SetAssetCustomFieldResponses[keyof SetAssetCustomFieldResponses];

export type ListAssetVersionsData = {
    body?: never;
    path: {
        /**
         * The id of the asset
         */
        assetId: string;
    };
    query?: never;
    url: '/v1/assets/{assetId}/versions';
};

export type ListAssetVersionsResponses = {
    /**
     * Default
     */
    default: {
        data?: Array<{
            id?: string;
            fileName?: string;
            description?: string;
            ext?: string;
            title?: string;
            type?: string;
            createdAt?: string;
            uploadedAt?: string;
            width?: number;
            height?: number;
            size?: number;
            urls?: {
                thumbnail?: string;
                preview?: string;
            };
        }>;
        total?: number;
    };
};

export type ListAssetVersionsResponse = ListAssetVersionsResponses[keyof ListAssetVersionsResponses];

export type GetAssetVersionData = {
    body?: never;
    path: {
        /**
         * the id of the asset
         */
        assetId: string;
        /**
         * the id of the version
         */
        versionId: string;
    };
    query?: never;
    url: '/v1/assets/{assetId}/versions/{versionId}';
};

export type GetAssetVersionResponses = {
    /**
     * Default
     */
    default: GetAssetVersionResponse;
};

export type GetAssetVersionResponse2 = GetAssetVersionResponses[keyof GetAssetVersionResponses];

export type UpdateAssetVersionData = {
    body?: {
        title?: string;
        description?: string;
    };
    path: {
        /**
         * the id of the asset
         */
        assetId: string;
        /**
         * the id of the version
         */
        versionId: string;
    };
    query?: never;
    url: '/v1/assets/{assetId}/versions/{versionId}';
};

export type UpdateAssetVersionResponses = {
    /**
     * Default
     */
    204: {
        [key: string]: unknown;
    };
};

export type UpdateAssetVersionResponse = UpdateAssetVersionResponses[keyof UpdateAssetVersionResponses];

export type GetAssetVersionDownloadUrlData = {
    body?: never;
    path: {
        /**
         * the id of the asset
         */
        assetId: string;
        /**
         * the id of the version
         */
        versionId: string;
    };
    query?: never;
    url: '/v1/assets/{assetId}/versions/{versionId}/download';
};

export type GetAssetVersionDownloadUrlResponses = {
    /**
     * Default
     */
    200: {
        url?: string;
        expiresAt?: string;
    };
};

export type GetAssetVersionDownloadUrlResponse = GetAssetVersionDownloadUrlResponses[keyof GetAssetVersionDownloadUrlResponses];

export type AddAssetVersionTagData = {
    body?: never;
    path: {
        /**
         * the id of the asset
         */
        assetId: string;
        /**
         * the id of the version
         */
        versionId: string;
    };
    query?: never;
    url: '/v1/assets/{assetId}/versions/{versionId}/tags';
};

export type AddAssetVersionTagResponses = {
    /**
     * Default
     */
    204: void;
};

export type AddAssetVersionTagResponse = AddAssetVersionTagResponses[keyof AddAssetVersionTagResponses];

export type DeleteAssetVersionTagData = {
    body?: never;
    path: {
        /**
         * the id of the asset
         */
        assetId: string;
        /**
         * the id of the version
         */
        versionId: string;
        /**
         * the id of the tag
         */
        tagId: string;
    };
    query?: never;
    url: '/v1/assets/{assetId}/versions/{versionId}/tags/{tagId}';
};

export type DeleteAssetVersionTagResponses = {
    /**
     * Default
     */
    204: void;
};

export type DeleteAssetVersionTagResponse = DeleteAssetVersionTagResponses[keyof DeleteAssetVersionTagResponses];

export type ListAssetBoardsData = {
    body?: never;
    path: {
        /**
         * the id of the asset
         */
        assetId: string;
    };
    query?: {
        /**
         * The max number of parent boards to return in the response
         */
        limit?: string;
        /**
         * Cursor to the next page of parent boards
         */
        cursor?: string;
        /**
         * A boolean flag to include custom fields with the results (default: `false`)
         */
        includeCustomFields?: string;
    };
    url: '/v1/assets/{assetId}/boards';
};

export type ListAssetBoardsResponses = {
    /**
     * Default
     */
    200: {
        data?: Array<{
            id?: string;
            parentBoardId?: string;
            title?: string;
            description?: string;
            createdAt?: string;
            updatedAt?: string;
        }>;
        pagination?: {
            hasMore?: boolean;
            cursor?: unknown;
        };
        total?: number;
    };
};

export type ListAssetBoardsResponse = ListAssetBoardsResponses[keyof ListAssetBoardsResponses];

export type ListBoardsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Free text board name search filter
         */
        name?: string;
        /**
         * Limits the number of boards items to return in the response
         */
        limit?: string;
        /**
         * Cursor returned in the previous page of responses used to get the next page of results
         */
        cursor?: string;
        /**
         * Used when navigating immediate child sub boards in a board hierarchy
         */
        parentBoardId?: string;
    };
    url: '/v1/boards';
};

export type ListBoardsResponses = {
    /**
     * Default
     */
    default: {
        data?: Array<{
            id?: string;
            title?: string;
            description?: string;
            parentBoardId?: string;
            createdAt?: string;
            updatedAt?: string;
            customFields?: Array<{
                id?: string;
                name?: string;
                type?: string;
                values?: Array<{
                    id?: string;
                    name?: string;
                }>;
            }>;
        }>;
        pagination?: {
            hasMore?: boolean;
            cursor?: unknown;
        };
        total?: number;
    };
};

export type ListBoardsResponse = ListBoardsResponses[keyof ListBoardsResponses];

export type CreateBoardData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/boards';
};

export type CreateBoardResponses = {
    /**
     * Default
     */
    200: {
        id?: string;
        title?: string;
        description?: string;
        parentBoardId?: string;
    };
};

export type CreateBoardResponse = CreateBoardResponses[keyof CreateBoardResponses];

export type DeleteBoardData = {
    body?: never;
    path: {
        /**
         * the id of the board
         */
        boardId: string;
    };
    query?: never;
    url: '/v1/boards/{boardId}';
};

export type DeleteBoardResponses = {
    /**
     * Default
     */
    204: void;
};

export type DeleteBoardResponse = DeleteBoardResponses[keyof DeleteBoardResponses];

export type GetBoardData = {
    body?: never;
    path: {
        /**
         * the id of the board
         */
        boardId: string;
    };
    query?: never;
    url: '/v1/boards/{boardId}';
};

export type GetBoardResponses = {
    /**
     * Default
     */
    200: {
        id?: string;
        title?: string;
        description?: string;
        parentBoardId?: string;
        createdAt?: string;
        updatedAt?: string;
        customFields?: Array<{
            id?: string;
            name?: string;
            type?: string;
            values?: Array<{
                id?: string;
                name?: string;
            }>;
        }>;
    };
};

export type GetBoardResponse = GetBoardResponses[keyof GetBoardResponses];

export type UpdateBoardData = {
    body?: never;
    path: {
        /**
         * the id of the board
         */
        boardId: string;
    };
    query?: never;
    url: '/v1/boards/{boardId}';
};

export type UpdateBoardResponses = {
    /**
     * Default
     */
    204: void;
};

export type UpdateBoardResponse = UpdateBoardResponses[keyof UpdateBoardResponses];

export type SetBoardCustomFieldData = {
    body?: never;
    path: {
        /**
         * the id of the board
         */
        boardId: string;
        /**
         * the id of the custom field
         */
        customFieldId: string;
    };
    query?: never;
    url: '/v1/boards/{boardId}/customfields/{customFieldId}';
};

export type SetBoardCustomFieldResponses = {
    /**
     * single-select
     */
    200: {
        [key: string]: unknown;
    };
};

export type SetBoardCustomFieldResponse = SetBoardCustomFieldResponses[keyof SetBoardCustomFieldResponses];

export type AddAssetsToBoardData = {
    body?: never;
    path: {
        boardId: string;
    };
    query?: never;
    url: '/v1/boards/{boardId}/assets';
};

export type AddAssetsToBoardResponses = {
    /**
     * Default
     */
    204: {
        [key: string]: unknown;
    };
};

export type AddAssetsToBoardResponse = AddAssetsToBoardResponses[keyof AddAssetsToBoardResponses];

export type RemoveAssetFromBoardData = {
    body?: unknown;
    path: {
        /**
         * the id of the board
         */
        boardId: string;
        /**
         * the id of the asset
         */
        assetId: string;
    };
    query?: never;
    url: '/v1/boards/{boardId}/assets/{assetId}';
};

export type RemoveAssetFromBoardResponses = {
    /**
     * Default
     */
    204: unknown;
};

export type ListBoardGuestsData = {
    body?: never;
    path: {
        /**
         * the id of the board
         */
        boardId: string;
    };
    query?: {
        /**
         * (optional) to filter with email
         */
        email?: string;
    };
    url: '/v1/boards/{boardId}/guests';
};

export type ListBoardGuestsResponses = {
    /**
     * Default
     */
    200: {
        data?: Array<{
            id?: string;
            email?: string;
            roleId?: string;
            boardId?: string;
        }>;
    };
};

export type ListBoardGuestsResponse = ListBoardGuestsResponses[keyof ListBoardGuestsResponses];

export type AddBoardGuestData = {
    body?: never;
    path: {
        /**
         * the id of the board
         */
        boardId: string;
    };
    query?: never;
    url: '/v1/boards/{boardId}/guests';
};

export type AddBoardGuestResponses = {
    /**
     * Default
     */
    200: {
        id?: string;
        email?: string;
        roleId?: string;
        boardId?: string;
    };
};

export type AddBoardGuestResponse = AddBoardGuestResponses[keyof AddBoardGuestResponses];

export type RemoveBoardGuestData = {
    body?: never;
    path: {
        /**
         * the id of the board
         */
        boardId: string;
        /**
         * the id of the guest
         */
        guestId: string;
    };
    query?: never;
    url: '/v1/boards/{boardId}/guests/{guestId}';
};

export type RemoveBoardGuestResponses = {
    /**
     * Default
     */
    204: {
        [key: string]: unknown;
    };
};

export type RemoveBoardGuestResponse = RemoveBoardGuestResponses[keyof RemoveBoardGuestResponses];

export type UpdateBoardGuestData = {
    body?: {
        [key: string]: unknown;
    };
    path: {
        /**
         * the id of the board
         */
        boardId: string;
        /**
         * the id of the guest
         */
        guestId: string;
    };
    query?: never;
    url: '/v1/boards/{boardId}/guests/{guestId}';
};

export type UpdateBoardGuestResponses = {
    /**
     * Default
     */
    204: {
        [key: string]: unknown;
    };
};

export type UpdateBoardGuestResponse = UpdateBoardGuestResponses[keyof UpdateBoardGuestResponses];

export type ListCustomFieldsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Free text search for custom field names matching criteria
         */
        name?: string;
        /**
         * The number of records returned
         */
        limit?: string;
        /**
         * The cursor returned to from previous page of results
         */
        cursor?: string;
    };
    url: '/v1/customfields';
};

export type ListCustomFieldsResponses = {
    /**
     * Default
     */
    default: {
        data?: Array<{
            id?: string;
            name?: string;
            description?: string;
            createdAt?: string;
            updatedAt?: string;
            type?: string;
        }>;
        pagination?: {
            hasMore?: boolean;
            cursor?: unknown;
        };
        total?: number;
    };
};

export type ListCustomFieldsResponse = ListCustomFieldsResponses[keyof ListCustomFieldsResponses];

export type CreateCustomFieldData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/customfields';
};

export type CreateCustomFieldErrors = {
    /**
     * single-select
     */
    default: {
        id?: string;
        name?: string;
        description?: string;
        type?: string;
        values?: Array<{
            id?: string;
            name?: string;
        }>;
    };
};

export type CreateCustomFieldError = CreateCustomFieldErrors[keyof CreateCustomFieldErrors];

export type CreateCustomFieldResponses = {
    /**
     * multi-select
     */
    200: {
        id?: string;
        name?: string;
        description?: string;
        type?: string;
        values?: Array<{
            id?: string;
            name?: string;
        }>;
    };
};

export type CreateCustomFieldResponse = CreateCustomFieldResponses[keyof CreateCustomFieldResponses];

export type DeleteCustomFieldData = {
    body?: never;
    path: {
        /**
         * The id of the custom field to update
         */
        customFieldId: string;
    };
    query?: never;
    url: '/v1/customfields/{customFieldId}';
};

export type DeleteCustomFieldResponses = {
    /**
     * Default
     */
    204: void;
};

export type DeleteCustomFieldResponse = DeleteCustomFieldResponses[keyof DeleteCustomFieldResponses];

export type GetCustomFieldData = {
    body?: never;
    path: {
        /**
         * The id of the custom field to update
         */
        customFieldId: string;
    };
    query?: never;
    url: '/v1/customfields/{customFieldId}';
};

export type GetCustomFieldResponses = {
    /**
     * Default
     */
    default: {
        id?: string;
        name?: string;
        description?: string;
        createdAt?: string;
        updatedAt?: string;
        type?: string;
        values?: Array<{
            id?: string;
            name?: string;
        }>;
    };
};

export type GetCustomFieldResponse = GetCustomFieldResponses[keyof GetCustomFieldResponses];

export type UpdateCustomFieldData = {
    body?: never;
    path: {
        /**
         * The id of the custom field to update
         */
        customFieldId: string;
    };
    query?: never;
    url: '/v1/customfields/{customFieldId}';
};

export type UpdateCustomFieldResponses = {
    /**
     * Default
     */
    200: unknown;
};

export type AddCustomFieldValueData = {
    body?: never;
    path: {
        /**
         * the id of the custom field
         */
        customFieldId: string;
    };
    query?: never;
    url: '/v1/customfields/{customFieldId}/values';
};

export type AddCustomFieldValueResponses = {
    /**
     * Default
     */
    default: {
        id?: string;
        name?: string;
    };
};

export type AddCustomFieldValueResponse = AddCustomFieldValueResponses[keyof AddCustomFieldValueResponses];

export type DeleteCustomFieldValueData = {
    body?: never;
    path: {
        /**
         * the id of the custom field
         */
        customFieldId: string;
        /**
         * the id of the custom field value to delete
         */
        valueId: string;
    };
    query?: never;
    url: '/v1/customfields/{customFieldId}/values/{valueId}';
};

export type DeleteCustomFieldValueResponses = {
    /**
     * Default
     */
    204: {
        [key: string]: unknown;
    };
};

export type DeleteCustomFieldValueResponse = DeleteCustomFieldValueResponses[keyof DeleteCustomFieldValueResponses];

export type UpdateCustomFieldValueData = {
    body?: never;
    path: {
        /**
         * the id of the custom field
         */
        customFieldId: string;
        /**
         * the id of the custom field value to delete
         */
        valueId: string;
    };
    query?: never;
    url: '/v1/customfields/{customFieldId}/values/{valueId}';
};

export type UpdateCustomFieldValueResponses = {
    /**
     * Default
     */
    default: {
        id?: string;
        name?: string;
    };
};

export type UpdateCustomFieldValueResponse = UpdateCustomFieldValueResponses[keyof UpdateCustomFieldValueResponses];

export type ListTagsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Free text search for tag names matching criteria
         */
        name?: string;
        /**
         * The number of records returned
         */
        limit?: string;
        /**
         * The cursor returned to from previous page of results
         */
        cursor?: string;
    };
    url: '/v1/tags';
};

export type ListTagsResponses = {
    /**
     * Default
     */
    default: {
        data?: Array<{
            id?: string;
            name?: string;
        }>;
        pagination?: {
            hasMore?: boolean;
            cursor?: unknown;
        };
        total?: number;
    };
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type CreateTagData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/tags';
};

export type CreateTagResponses = {
    /**
     * Default
     */
    default: {
        id?: string;
        name?: string;
    };
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type DeleteTagData = {
    body?: never;
    path: {
        /**
         * the id of the tag
         */
        tagId: string;
    };
    query?: never;
    url: '/v1/tags/{tagId}';
};

export type DeleteTagResponses = {
    /**
     * Default
     */
    204: {
        [key: string]: unknown;
    };
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type UpdateTagData = {
    body?: never;
    path: {
        /**
         * the id of the tag
         */
        tagId: string;
    };
    query?: never;
    url: '/v1/tags/{tagId}';
};

export type UpdateTagResponses = {
    /**
     * Default
     */
    default: {
        id?: string;
        name?: string;
    };
};

export type UpdateTagResponse = UpdateTagResponses[keyof UpdateTagResponses];

export type CreateUploadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/uploads';
};

export type CreateUploadResponses = {
    /**
     * Small File (<5G)
     */
    201: {
        assetId?: string;
        versionId?: string;
        uploadUrl?: string;
    };
};

export type CreateUploadResponse = CreateUploadResponses[keyof CreateUploadResponses];

export type CreateUploadPartData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/uploads/uploadPart';
};

export type CreateUploadPartResponses = {
    /**
     * Default
     */
    201: {
        url?: string;
    };
};

export type CreateUploadPartResponse = CreateUploadPartResponses[keyof CreateUploadPartResponses];

export type CompleteMultipartUploadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/completeMultipart';
};

export type CompleteMultipartUploadResponses = {
    /**
     * Default
     */
    200: {
        [key: string]: unknown;
    };
};

export type CompleteMultipartUploadResponse = CompleteMultipartUploadResponses[keyof CompleteMultipartUploadResponses];

export type CreateImportData = {
    body?: {
        [key: string]: unknown;
    };
    headers?: {
        'x-air-workspace-id'?: string;
    };
    path?: never;
    query?: never;
    url: '/v1/imports';
};

export type CreateImportResponses = {
    /**
     * Without metadata
     */
    default: {
        id?: string;
        assetId?: string;
        versionId?: string;
    };
};

export type CreateImportResponse = CreateImportResponses[keyof CreateImportResponses];

export type GetImportStatusData = {
    body?: never;
    headers?: {
        'x-air-workspace-id'?: string;
    };
    path: {
        importId: string;
    };
    query?: never;
    url: '/v1/imports/{importId}/status';
};

export type GetImportStatusResponses = {
    /**
     * succeeded
     */
    default: {
        status?: string;
    };
};

export type GetImportStatusResponse = GetImportStatusResponses[keyof GetImportStatusResponses];

export type ListRolesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * (required) to filter the roles by type
         */
        type?: string;
    };
    url: '/v1/roles';
};

export type ListRolesResponses = {
    /**
     * Default
     */
    200: {
        data?: Array<{
            id?: string;
            name?: string;
            description?: string;
            billable?: boolean;
            type?: string;
        }>;
    };
};

export type ListRolesResponse = ListRolesResponses[keyof ListRolesResponses];

export type ClientOptions = {
    baseURL: `${string}://api.air.inc` | (string & {});
};