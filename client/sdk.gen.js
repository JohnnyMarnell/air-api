"use strict";
// This file is auto-generated by @hey-api/openapi-ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.listRoles = exports.getImportStatus = exports.createImport = exports.completeMultipartUpload = exports.createUploadPart = exports.createUpload = exports.updateTag = exports.deleteTag = exports.createTag = exports.listTags = exports.updateCustomFieldValue = exports.deleteCustomFieldValue = exports.addCustomFieldValue = exports.updateCustomField = exports.getCustomField = exports.deleteCustomField = exports.createCustomField = exports.listCustomFields = exports.updateBoardGuest = exports.removeBoardGuest = exports.addBoardGuest = exports.listBoardGuests = exports.removeAssetFromBoard = exports.addAssetsToBoard = exports.setBoardCustomField = exports.updateBoard = exports.getBoard = exports.deleteBoard = exports.createBoard = exports.listBoards = exports.listAssetBoards = exports.deleteAssetVersionTag = exports.addAssetVersionTag = exports.getAssetVersionDownloadUrl = exports.updateAssetVersion = exports.getAssetVersion = exports.listAssetVersions = exports.setAssetCustomField = exports.getAsset = exports.deleteAsset = exports.listAssets = void 0;
const client_gen_1 = require("./client.gen");
/**
 * Get a list of assets.
 */
const listAssets = (options) => {
    return (options?.client ?? client_gen_1.client).get({
        responseType: 'json',
        url: '/v1/assets',
        ...options
    });
};
exports.listAssets = listAssets;
/**
 * Delete an asset
 */
const deleteAsset = (options) => {
    return (options.client ?? client_gen_1.client).delete({
        url: '/v1/assets/{assetId}',
        ...options
    });
};
exports.deleteAsset = deleteAsset;
/**
 * Get an asset
 */
const getAsset = (options) => {
    return (options.client ?? client_gen_1.client).get({
        url: '/v1/assets/{assetId}',
        ...options
    });
};
exports.getAsset = getAsset;
/**
 * Set custom field value(s) on an asset
 *
 * Body:
 * - values - an array of objects containing the id of the custom field value to set (used for single-select and multi-select)
 * - value - a string containing the value to set (used for plain-text and date)
 *
 * To unset a custom field on an asset, set the relevant property above to null
 *
 */
const setAssetCustomField = (options) => {
    return (options.client ?? client_gen_1.client).put({
        responseType: 'json',
        url: '/v1/assets/{assetId}/customfields/{customFieldId}',
        ...options
    });
};
exports.setAssetCustomField = setAssetCustomField;
/**
 * Get a list of asset versions associated with an asset.
 */
const listAssetVersions = (options) => {
    return (options.client ?? client_gen_1.client).get({
        url: '/v1/assets/{assetId}/versions',
        ...options
    });
};
exports.listAssetVersions = listAssetVersions;
/**
 * Get an asset version associated with an asset, including metadata fields like `IPTC` and `EXIF`.
 */
const getAssetVersion = (options) => {
    return (options.client ?? client_gen_1.client).get({
        url: '/v1/assets/{assetId}/versions/{versionId}',
        ...options
    });
};
exports.getAssetVersion = getAssetVersion;
/**
 * Update an asset version
 *
 * Body:
 * - title - the title of the version
 * - description - the description of the version
 *
 */
const updateAssetVersion = (options) => {
    return (options.client ?? client_gen_1.client).patch({
        responseType: 'json',
        url: '/v1/assets/{assetId}/versions/{versionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
exports.updateAssetVersion = updateAssetVersion;
/**
 * Get the download URL of an asset version
 */
const getAssetVersionDownloadUrl = (options) => {
    return (options.client ?? client_gen_1.client).get({
        responseType: 'json',
        url: '/v1/assets/{assetId}/versions/{versionId}/download',
        ...options
    });
};
exports.getAssetVersionDownloadUrl = getAssetVersionDownloadUrl;
/**
 * Add one or more tags to an asset version
 *
 * Body:
 * - id - the id of the tag to add to the version
 *
 */
const addAssetVersionTag = (options) => {
    return (options.client ?? client_gen_1.client).post({
        url: '/v1/assets/{assetId}/versions/{versionId}/tags',
        ...options
    });
};
exports.addAssetVersionTag = addAssetVersionTag;
/**
 * Delete a tag from an asset version
 */
const deleteAssetVersionTag = (options) => {
    return (options.client ?? client_gen_1.client).delete({
        url: '/v1/assets/{assetId}/versions/{versionId}/tags/{tagId}',
        ...options
    });
};
exports.deleteAssetVersionTag = deleteAssetVersionTag;
/**
 * Get the list of parent boards of an asset
 */
const listAssetBoards = (options) => {
    return (options.client ?? client_gen_1.client).get({
        responseType: 'json',
        url: '/v1/assets/{assetId}/boards',
        ...options
    });
};
exports.listAssetBoards = listAssetBoards;
/**
 * Get the list of boards defined in an Air workspace.
 */
const listBoards = (options) => {
    return (options?.client ?? client_gen_1.client).get({
        url: '/v1/boards',
        ...options
    });
};
exports.listBoards = listBoards;
/**
 * Create a board at the top-level of the workspace or as a child of another board
 *
 * Body:
 * - title - the title of the board
 * - description - the description of the board
 * - parentBoardId (optional) - the id of the parent board that this board will be a child of
 *
 */
const createBoard = (options) => {
    return (options?.client ?? client_gen_1.client).post({
        responseType: 'json',
        url: '/v1/boards',
        ...options
    });
};
exports.createBoard = createBoard;
/**
 * Delete a board and any assets that are only contained in this board or its direct descendant boards.
 */
const deleteBoard = (options) => {
    return (options.client ?? client_gen_1.client).delete({
        url: '/v1/boards/{boardId}',
        ...options
    });
};
exports.deleteBoard = deleteBoard;
/**
 * Get a board
 */
const getBoard = (options) => {
    return (options.client ?? client_gen_1.client).get({
        responseType: 'json',
        url: '/v1/boards/{boardId}',
        ...options
    });
};
exports.getBoard = getBoard;
/**
 * Update one or more properties on a board
 *
 * Body:
 * - title - the title of the board
 * - description - the description of the board
 * - parentBoardId - the parent board this board is a child of. null will move the board to the root.
 *
 */
const updateBoard = (options) => {
    return (options.client ?? client_gen_1.client).patch({
        url: '/v1/boards/{boardId}',
        ...options
    });
};
exports.updateBoard = updateBoard;
/**
 * Assign value(s) for a custom field on a board
 *
 * Body:
 * - values - a list of objects with the id of the value to be set on the board for the custom field (used with single-select and multi-select custom fields)
 * - value - the string value to be set for the custom field on the board (used with plain-text and date custom fields)
 *
 */
const setBoardCustomField = (options) => {
    return (options.client ?? client_gen_1.client).put({
        responseType: 'json',
        url: '/v1/boards/{boardId}/customfields/{customFieldId}',
        ...options
    });
};
exports.setBoardCustomField = setBoardCustomField;
/**
 * Associates one or more assets to a board
 *
 * Body:
 * - assetIds - an array of assetIds to associate with the board
 *
 */
const addAssetsToBoard = (options) => {
    return (options.client ?? client_gen_1.client).post({
        responseType: 'json',
        url: '/v1/boards/{boardId}/assets',
        ...options
    });
};
exports.addAssetsToBoard = addAssetsToBoard;
/**
 * Removes an asset from a board
 */
const removeAssetFromBoard = (options) => {
    return (options.client ?? client_gen_1.client).delete({
        responseType: 'json',
        url: '/v1/boards/{boardId}/assets/{assetId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
exports.removeAssetFromBoard = removeAssetFromBoard;
/**
 * Get the list of guests of the board.
 */
const listBoardGuests = (options) => {
    return (options.client ?? client_gen_1.client).get({
        responseType: 'json',
        url: '/v1/boards/{boardId}/guests',
        ...options
    });
};
exports.listBoardGuests = listBoardGuests;
/**
 * Add a guest to the board.
 *
 * Body:
 * - email - email address of the user to be added as guest
 * - roleId - id of the role to be associated with the guest
 *
 */
const addBoardGuest = (options) => {
    return (options.client ?? client_gen_1.client).post({
        responseType: 'json',
        url: '/v1/boards/{boardId}/guests',
        ...options
    });
};
exports.addBoardGuest = addBoardGuest;
/**
 * Remove a guest from the board.
 */
const removeBoardGuest = (options) => {
    return (options.client ?? client_gen_1.client).delete({
        responseType: 'json',
        url: '/v1/boards/{boardId}/guests/{guestId}',
        ...options
    });
};
exports.removeBoardGuest = removeBoardGuest;
/**
 * Change the role of a guest.
 *
 * Body:
 * - roleId - id of the role to be associated with the guest
 *
 */
const updateBoardGuest = (options) => {
    return (options.client ?? client_gen_1.client).patch({
        responseType: 'json',
        url: '/v1/boards/{boardId}/guests/{guestId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
exports.updateBoardGuest = updateBoardGuest;
/**
 * List custom fields
 */
const listCustomFields = (options) => {
    return (options?.client ?? client_gen_1.client).get({
        url: '/v1/customfields',
        ...options
    });
};
exports.listCustomFields = listCustomFields;
/**
 * Create a custom field (maximum total allowed per workspace: 100)
 *
 * Body:
 * - name - the name of the custom field
 * - description - the description of the custom field
 * - type - the type of the custom field
 * - values - the values of a single-select or multi-select custom field
 *
 */
const createCustomField = (options) => {
    return (options?.client ?? client_gen_1.client).post({
        responseType: 'json',
        url: '/v1/customfields',
        ...options
    });
};
exports.createCustomField = createCustomField;
/**
 * Delete a custom field
 */
const deleteCustomField = (options) => {
    return (options.client ?? client_gen_1.client).delete({
        url: '/v1/customfields/{customFieldId}',
        ...options
    });
};
exports.deleteCustomField = deleteCustomField;
/**
 * Get a custom field
 */
const getCustomField = (options) => {
    return (options.client ?? client_gen_1.client).get({
        url: '/v1/customfields/{customFieldId}',
        ...options
    });
};
exports.getCustomField = getCustomField;
/**
 * Update one or more properties on a custom field
 *
 * Body:
 * - name - the name of the custom field
 * - description - the description of the custom field
 *
 * *type is immutable due to workflows being built on top of custom fields
 *
 */
const updateCustomField = (options) => {
    return (options.client ?? client_gen_1.client).patch({
        url: '/v1/customfields/{customFieldId}',
        ...options
    });
};
exports.updateCustomField = updateCustomField;
/**
 * Add a new value to a single-select or multi-select custom field.
 *
 * Body:
 * - name - the name of the custom field value
 *
 */
const addCustomFieldValue = (options) => {
    return (options.client ?? client_gen_1.client).post({
        url: '/v1/customfields/{customFieldId}/values',
        ...options
    });
};
exports.addCustomFieldValue = addCustomFieldValue;
/**
 * Delete a value off of a custom field
 */
const deleteCustomFieldValue = (options) => {
    return (options.client ?? client_gen_1.client).delete({
        responseType: 'json',
        url: '/v1/customfields/{customFieldId}/values/{valueId}',
        ...options
    });
};
exports.deleteCustomFieldValue = deleteCustomFieldValue;
/**
 * Update one or more properties on a value
 */
const updateCustomFieldValue = (options) => {
    return (options.client ?? client_gen_1.client).patch({
        url: '/v1/customfields/{customFieldId}/values/{valueId}',
        ...options
    });
};
exports.updateCustomFieldValue = updateCustomFieldValue;
/**
 * List tags in the workspace
 */
const listTags = (options) => {
    return (options?.client ?? client_gen_1.client).get({
        url: '/v1/tags',
        ...options
    });
};
exports.listTags = listTags;
/**
 * Create a new tag
 *
 * Body:
 * - name - the name of the tag
 *
 */
const createTag = (options) => {
    return (options?.client ?? client_gen_1.client).post({
        url: '/v1/tags',
        ...options
    });
};
exports.createTag = createTag;
/**
 * Delete a tag
 */
const deleteTag = (options) => {
    return (options.client ?? client_gen_1.client).delete({
        responseType: 'json',
        url: '/v1/tags/{tagId}',
        ...options
    });
};
exports.deleteTag = deleteTag;
/**
 * Update one or more properties on a tag
 */
const updateTag = (options) => {
    return (options.client ?? client_gen_1.client).patch({
        url: '/v1/tags/{tagId}',
        ...options
    });
};
exports.updateTag = updateTag;
/**
 * Upload an asset to a workspace
 *
 * Body:
 * - fileName - the name of the file
 * - ext - the extension of the file
 * - size - the size of the file
 * - mime - the mime of the file
 * - recordedAt - when the file was created
 * - parentBoardId (optional) - the parent board to create the asset under
 * - assetId (optional) - the parent asset to create a new version for this file under
 * - customFields (optional) - the list of custom fields and values to assign to the asset
 * - tags (optional) - the list of tags to assign to the asset version
 *
 */
const createUpload = (options) => {
    return (options?.client ?? client_gen_1.client).post({
        responseType: 'json',
        url: '/v1/uploads',
        ...options
    });
};
exports.createUpload = createUpload;
/**
 * Create a part upload url
 *
 * Body:
 * - multiPartUploadId - upload id returned from POST /uploads
 * - key - key returned from POST /uploads
 * - partNumber - the number associated with the chunk being uploaded
 *
 */
const createUploadPart = (options) => {
    return (options?.client ?? client_gen_1.client).post({
        responseType: 'json',
        url: '/v1/uploads/uploadPart',
        ...options
    });
};
exports.createUploadPart = createUploadPart;
/**
 * Complete a large file upload
 *
 * Body:
 * - multiPartUploadId - the upload id returned from POST /uploads
 * - key - the key returned from POST /uploads
 * - parts - an array of objects containing the etag (returned from file upload) and partNumber for each chunk
 *
 */
const completeMultipartUpload = (options) => {
    return (options?.client ?? client_gen_1.client).post({
        responseType: 'json',
        url: '/v1/completeMultipart',
        ...options
    });
};
exports.completeMultipartUpload = completeMultipartUpload;
/**
 * Create an import of an asset or asset version from a public URL.
 *
 * Request Body:
 * - sourceUrl - the URL to get the file content. The URL needs to be publicly accessible.
 * - fileName (optional) - the name of the file. If not provided then it will be determined from the URL.
 * - ext (optional) - the extension of the file. If not provided then the ext will be pulled from the URL or defaulted to .file
 * - recordedAt (optional) - when the file was created. If not provided the servers current time will be used.
 * - assetId (optional) - the parent asset to create a new version for this file under.
 * - parentBoardId (optional) - the parent board to create the asset under.
 * - customFields (optional) - the list of custom fields and values to assign to the asset.
 * - tags (optional) - the list of tags to assign to the asset version.
 * - title (optional) - the title to assign to the asset version.
 * - description (optional) - the description to assign to the asset version.
 *
 */
const createImport = (options) => {
    return (options?.client ?? client_gen_1.client).post({
        url: '/v1/imports',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};
exports.createImport = createImport;
/**
 * Retrieve the status of a specific import by providing the import ID in the URL.
 *
 * Response:
 * The body of the response will contain a JSON object with "status" and also "error" if the import is failed.
 * - status:
 * - pending - the import is waiting to be scheduled.
 * - inProgress - the import is in progress.
 * - failed - the import has failed.
 * - succeeded - the import completed.
 * - error: An object containing the error type and message if the import failed.
 * - SOURCE_FILE_NOT_FOUND - the file is not found from source Url when executing task.
 * - SOURCE_URL_BLOCKED - the source URL is to be blocked by the block rules.
 * - SOURCE_URL_INVALID - the file URL returns 4xx, 5xx errors.
 * - PROCESS_TIMED_OUT - exceeded the maximum amount of time allowed
 *
 */
const getImportStatus = (options) => {
    return (options.client ?? client_gen_1.client).get({
        url: '/v1/imports/{importId}/status',
        ...options
    });
};
exports.getImportStatus = getImportStatus;
/**
 * Get the list of guest roles available in a workspace.
 */
const listRoles = (options) => {
    return (options?.client ?? client_gen_1.client).get({
        responseType: 'json',
        url: '/v1/roles',
        ...options
    });
};
exports.listRoles = listRoles;
