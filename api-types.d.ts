/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/v1/assets": {
        /** /assets */
        get: {
            parameters: {
                query?: {
                    /** @description The maximum number of assets to return in the response */
                    limit?: number;
                    /** @description Cursor to the next page of assets */
                    cursor?: string;
                    /** @description The parent board ID of the assets to return */
                    parentBoardId?: string;
                    /** @description Filter assets by attached tags. If multiple `tag=value` pairs are provided, only assets with all specified tags will be included. */
                    tag?: string;
                };
            };
            responses: {
                /** @description Filter by tag */
                200: {
                    headers: {};
                    content: {
                        "application/json": {
                            data?: {
                                id?: string;
                                customFields?: {
                                    id?: string;
                                    name?: string;
                                    type?: string;
                                    values?: {
                                        id?: string;
                                        name?: string;
                                    }[];
                                }[];
                                coverVersion?: {
                                    id?: string;
                                    fileName?: string;
                                    description?: string;
                                    ext?: string;
                                    title?: string;
                                    type?: string;
                                    /** Format: style */
                                    createdAt?: string;
                                    uploadedAt?: string;
                                    /** Format: style */
                                    fileCreatedAt?: string;
                                    width?: number;
                                    height?: number;
                                    size?: number;
                                    tags?: {
                                        id?: string;
                                        label?: string;
                                    }[];
                                    urls?: {
                                        /** Format: uri */
                                        thumbnail?: string;
                                        /** Format: uri */
                                        preview?: string;
                                    };
                                };
                            }[];
                            pagination?: {
                                hasMore?: boolean;
                                cursor?: unknown;
                            };
                            total?: number;
                        };
                    };
                };
                /** @description Default */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            data?: {
                                id?: string;
                                customFields?: {
                                    id?: string;
                                    name?: string;
                                    type?: string;
                                    values?: {
                                        id?: string;
                                        name?: string;
                                    }[];
                                }[];
                                coverVersion?: {
                                    id?: string;
                                    fileName?: string;
                                    description?: string;
                                    ext?: string;
                                    title?: string;
                                    type?: string;
                                    /** Format: style */
                                    createdAt?: string;
                                    uploadedAt?: string;
                                    /** Format: style */
                                    fileCreatedAt?: string;
                                    width?: number;
                                    height?: number;
                                    size?: number;
                                    tags?: {
                                        id?: string;
                                        label?: string;
                                    }[];
                                    urls?: {
                                        /** Format: uri */
                                        thumbnail?: string;
                                        /** Format: uri */
                                        preview?: string;
                                    };
                                };
                            }[];
                            pagination?: {
                                hasMore?: boolean;
                                cursor?: unknown;
                            };
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    "/v1/assets/{assetId}": {
        /** /assets/:assetId */
        get: {
            parameters: {
                path: {
                    assetId: string;
                };
            };
            responses: {
                /** @description Default */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            id?: string;
                            customFields?: {
                                id?: string;
                                name?: string;
                                type?: string;
                                values?: {
                                    id?: string;
                                    name?: string;
                                }[];
                            }[];
                            coverVersion?: {
                                id?: string;
                                fileName?: string;
                                description?: string;
                                ext?: string;
                                title?: string;
                                type?: string;
                                /** Format: style */
                                createdAt?: string;
                                uploadedAt?: string;
                                /** Format: style */
                                fileCreatedAt?: string;
                                width?: number;
                                height?: number;
                                size?: number;
                                tags?: {
                                    id?: string;
                                    label?: string;
                                }[];
                                urls?: {
                                    /** Format: uri */
                                    thumbnail?: string;
                                    /** Format: uri */
                                    preview?: string;
                                };
                            };
                        };
                    };
                };
            };
        };
        /** /assets/:assetId */
        delete: {
            parameters: {
                path: {
                    assetId: string;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {};
                    content: never;
                };
            };
        };
        parameters: {
            path: {
                assetId: string;
            };
        };
    };
    "/v1/assets/{assetId}/customfields/{customFieldId}": {
        /** /assets/:assetId/customfields/:customFieldId */
        put: {
            parameters: {
                path: {
                    /** @description the id of the asset */
                    assetId: string;
                    /** @description the id of the custom field */
                    customFieldId: string;
                };
            };
            responses: {
                /** @description single-select */
                200: {
                    headers: {};
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the asset */
                assetId: string;
                /** @description the id of the custom field */
                customFieldId: string;
            };
        };
    };
    "/v1/assets/{assetId}/versions": {
        get: {
            parameters: {
                path: {
                    /** @description The id of the asset */
                    assetId: string;
                };
            };
            responses: {
                /** @description Default */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            data?: {
                                id?: string;
                                fileName?: string;
                                description?: string;
                                ext?: string;
                                title?: string;
                                type?: string;
                                /** Format: style */
                                createdAt?: string;
                                uploadedAt?: string;
                                width?: number;
                                height?: number;
                                size?: number;
                                urls?: {
                                    /** Format: uri */
                                    thumbnail?: string;
                                    /** Format: uri */
                                    preview?: string;
                                };
                            }[];
                            total?: number;
                        };
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description The id of the asset */
                assetId: string;
            };
        };
    };
    "/v1/assets/{assetId}/versions/{versionId}": {
        /** @description Get an asset version associated with an asset, including metadata fields like `IPTC` and `EXIF`. */
        get: operations["getAssetVersion"];
        /** /assets/:assetId/versions/:versionId */
        patch: {
            parameters: {
                path: {
                    /** @description the id of the asset */
                    assetId: string;
                    /** @description the id of the version */
                    versionId: string;
                };
            };
            requestBody?: {
                content: {
                    "application/json": {
                        title?: string;
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {};
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the asset */
                assetId: string;
                /** @description the id of the version */
                versionId: string;
            };
        };
    };
    "/v1/assets/{assetId}/versions/{versionId}/download": {
        /** /assets/:assetId/versions/:versionId/download */
        get: {
            parameters: {
                path: {
                    /** @description the id of the asset */
                    assetId: string;
                    /** @description the id of the version */
                    versionId: string;
                };
            };
            responses: {
                /** @description Default */
                200: {
                    headers: {};
                    content: {
                        "application/json": {
                            /** Format: uri */
                            url?: string;
                            /** Format: date-time */
                            expiresAt?: string;
                        };
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the asset */
                assetId: string;
                /** @description the id of the version */
                versionId: string;
            };
        };
    };
    "/v1/assets/{assetId}/versions/{versionId}/tags": {
        /** /assets/:assetId/versions/:versionId/tags */
        post: {
            parameters: {
                path: {
                    /** @description the id of the asset */
                    assetId: string;
                    /** @description the id of the version */
                    versionId: string;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {};
                    content: never;
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the asset */
                assetId: string;
                /** @description the id of the version */
                versionId: string;
            };
        };
    };
    "/v1/assets/{assetId}/versions/{versionId}/tags/{tagId}": {
        /** /assets/:assetId/versions/:versionId/tags/:tagId */
        delete: {
            parameters: {
                path: {
                    /** @description the id of the asset */
                    assetId: string;
                    /** @description the id of the version */
                    versionId: string;
                    /** @description the id of the tag */
                    tagId: string;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {};
                    content: never;
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the asset */
                assetId: string;
                /** @description the id of the version */
                versionId: string;
                /** @description the id of the tag */
                tagId: string;
            };
        };
    };
    "/v1/assets/{assetId}/boards": {
        /** /assets/:assetId/boards */
        get: {
            parameters: {
                query?: {
                    /** @description The max number of parent boards to return in the response */
                    limit?: string;
                    /** @description Cursor to the next page of parent boards */
                    cursor?: string;
                    /** @description A boolean flag to include custom fields with the results (default: `false`) */
                    includeCustomFields?: string;
                };
                path: {
                    /** @description the id of the asset */
                    assetId: string;
                };
            };
            responses: {
                /** @description Default */
                200: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                id?: string;
                                parentBoardId?: string;
                                title?: string;
                                description?: string;
                                /** Format: style */
                                createdAt?: string;
                                updatedAt?: string;
                            }[];
                            pagination?: {
                                hasMore?: boolean;
                                cursor?: unknown;
                            };
                            total?: number;
                        };
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the asset */
                assetId: string;
            };
        };
    };
    "/v1/boards": {
        /** /boards */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Free text board name search filter
                     * @example :boardName
                     */
                    name?: string;
                    /**
                     * @description Limits the number of boards items to return in the response
                     * @example :limit
                     */
                    limit?: string;
                    /**
                     * @description Cursor returned in the previous page of responses used to get the next page of results
                     * @example :cursor
                     */
                    cursor?: string;
                    /**
                     * @description Used when navigating immediate child sub boards in a board hierarchy
                     * @example :parentBoardId
                     */
                    parentBoardId?: string;
                };
            };
            responses: {
                /** @description Default */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            data?: {
                                id?: string;
                                title?: string;
                                description?: string;
                                parentBoardId?: string;
                                /** Format: style */
                                createdAt?: string;
                                updatedAt?: string;
                                customFields?: {
                                    id?: string;
                                    name?: string;
                                    type?: string;
                                    values?: {
                                        id?: string;
                                        name?: string;
                                    }[];
                                }[];
                            }[];
                            pagination?: {
                                hasMore?: boolean;
                                cursor?: unknown;
                            };
                            total?: number;
                        };
                    };
                };
            };
        };
        /** /boards */
        post: {
            responses: {
                /** @description Default */
                200: {
                    headers: {};
                    content: {
                        "application/json": {
                            id?: string;
                            title?: string;
                            description?: string;
                            parentBoardId?: string;
                        };
                    };
                };
            };
        };
    };
    "/v1/boards/{boardId}": {
        /** /boards/:boardId */
        get: {
            parameters: {
                path: {
                    /** @description the id of the board */
                    boardId: string;
                };
            };
            responses: {
                /** @description Default */
                200: {
                    headers: {};
                    content: {
                        "application/json": {
                            id?: string;
                            title?: string;
                            description?: string;
                            parentBoardId?: string;
                            /** Format: style */
                            createdAt?: string;
                            updatedAt?: string;
                            customFields?: {
                                id?: string;
                                name?: string;
                                type?: string;
                                values?: {
                                    id?: string;
                                    name?: string;
                                }[];
                            }[];
                        };
                    };
                };
            };
        };
        /** /boards/:boardId */
        delete: {
            parameters: {
                path: {
                    /** @description the id of the board */
                    boardId: string;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {};
                    content: never;
                };
            };
        };
        /** /boards/:boardId */
        patch: {
            parameters: {
                path: {
                    /** @description the id of the board */
                    boardId: string;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {};
                    content: never;
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the board */
                boardId: string;
            };
        };
    };
    "/v1/boards/{boardId}/customfields/{customFieldId}": {
        /** /boards/:boardId/customfields/:customFieldId */
        put: {
            parameters: {
                path: {
                    /** @description the id of the board */
                    boardId: string;
                    /** @description the id of the custom field */
                    customFieldId: string;
                };
            };
            responses: {
                /** @description single-select */
                200: {
                    headers: {};
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the board */
                boardId: string;
                /** @description the id of the custom field */
                customFieldId: string;
            };
        };
    };
    "/v1/boards/{boardId}/assets": {
        /** /boards/:boardId/assets */
        post: {
            parameters: {
                path: {
                    boardId: string;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
        parameters: {
            path: {
                boardId: string;
            };
        };
    };
    "/v1/boards/{boardId}/assets/{assetId}": {
        /** /boards/:boardId/assets/:assetId */
        delete: {
            parameters: {
                path: {
                    /** @description the id of the board */
                    boardId: string;
                    /** @description the id of the asset */
                    assetId: string;
                };
            };
            requestBody?: {
                content: {
                    "application/json": unknown;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the board */
                boardId: string;
                /** @description the id of the asset */
                assetId: string;
            };
        };
    };
    "/v1/boards/{boardId}/guests": {
        /** /boards/:boardId/guests */
        get: {
            parameters: {
                query?: {
                    /** @description (optional) to filter with email */
                    email?: string;
                };
                path: {
                    /** @description the id of the board */
                    boardId: string;
                };
            };
            responses: {
                /** @description Default */
                200: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                id?: string;
                                /** Format: email */
                                email?: string;
                                roleId?: string;
                                boardId?: string;
                            }[];
                        };
                    };
                };
            };
        };
        /** /boards/:boardId/guests */
        post: {
            parameters: {
                path: {
                    /** @description the id of the board */
                    boardId: string;
                };
            };
            responses: {
                /** @description Default */
                200: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": {
                            id?: string;
                            /** Format: email */
                            email?: string;
                            roleId?: string;
                            boardId?: string;
                        };
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the board */
                boardId: string;
            };
        };
    };
    "/v1/boards/{boardId}/guests/{guestId}": {
        /** /boards/:boardId/guests/:guestId */
        delete: {
            parameters: {
                path: {
                    /** @description the id of the board */
                    boardId: string;
                    /** @description the id of the guest */
                    guestId: string;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
        /** /boards/:boardId/guests/:guestId */
        patch: {
            parameters: {
                path: {
                    /** @description the id of the board */
                    boardId: string;
                    /** @description the id of the guest */
                    guestId: string;
                };
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the board */
                boardId: string;
                /** @description the id of the guest */
                guestId: string;
            };
        };
    };
    "/v1/customfields": {
        /** /customfields */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Free text search for custom field names matching criteria
                     * @example :customFieldName
                     */
                    name?: string;
                    /**
                     * @description The number of records returned
                     * @example :limit
                     */
                    limit?: string;
                    /**
                     * @description The cursor returned to from previous page of results
                     * @example :cursor
                     */
                    cursor?: string;
                };
            };
            responses: {
                /** @description Default */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            data?: {
                                id?: string;
                                name?: string;
                                description?: string;
                                /** Format: style */
                                createdAt?: string;
                                updatedAt?: string;
                                type?: string;
                            }[];
                            pagination?: {
                                hasMore?: boolean;
                                cursor?: unknown;
                            };
                            total?: number;
                        };
                    };
                };
            };
        };
        /** /customfields */
        post: {
            responses: {
                /** @description multi-select */
                200: {
                    headers: {};
                    content: {
                        "application/json": {
                            id?: string;
                            name?: string;
                            description?: string;
                            type?: string;
                            values?: {
                                id?: string;
                                name?: string;
                            }[];
                        };
                    };
                };
                /** @description single-select */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            id?: string;
                            name?: string;
                            description?: string;
                            type?: string;
                            values?: {
                                id?: string;
                                name?: string;
                            }[];
                        };
                    };
                };
            };
        };
    };
    "/v1/customfields/{customFieldId}": {
        /** /customfields/:customFieldId */
        get: {
            parameters: {
                path: {
                    /** @description The id of the custom field to update */
                    customFieldId: string;
                };
            };
            responses: {
                /** @description Default */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            id?: string;
                            name?: string;
                            description?: string;
                            /** Format: style */
                            createdAt?: string;
                            updatedAt?: string;
                            type?: string;
                            values?: {
                                id?: string;
                                name?: string;
                            }[];
                        };
                    };
                };
            };
        };
        /** /customfields/:customFieldId: */
        delete: {
            parameters: {
                path: {
                    /** @description The id of the custom field to update */
                    customFieldId: string;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {};
                    content: never;
                };
            };
        };
        /** /customfields/:customFieldId: */
        patch: {
            parameters: {
                path: {
                    /** @description The id of the custom field to update */
                    customFieldId: string;
                };
            };
            responses: {
                /** @description Default */
                200: {
                    headers: {};
                    content: never;
                };
            };
        };
        parameters: {
            path: {
                /** @description The id of the custom field to update */
                customFieldId: string;
            };
        };
    };
    "/v1/customfields/{customFieldId}/values": {
        /** /customfields/:customFieldId:/values */
        post: {
            parameters: {
                path: {
                    /** @description the id of the custom field */
                    customFieldId: string;
                };
            };
            responses: {
                /** @description Default */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            id?: string;
                            name?: string;
                        };
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the custom field */
                customFieldId: string;
            };
        };
    };
    "/v1/customfields/{customFieldId}/values/{valueId}": {
        /** /customfields/:customFieldId:/values/:valueId */
        delete: {
            parameters: {
                path: {
                    /** @description the id of the custom field */
                    customFieldId: string;
                    /** @description the id of the custom field value to delete */
                    valueId: string;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {};
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
        /** /customfields/:customFieldId:/values/:valueId */
        patch: {
            parameters: {
                path: {
                    /** @description the id of the custom field */
                    customFieldId: string;
                    /** @description the id of the custom field value to delete */
                    valueId: string;
                };
            };
            responses: {
                /** @description Default */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            id?: string;
                            name?: string;
                        };
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the custom field */
                customFieldId: string;
                /** @description the id of the custom field value to delete */
                valueId: string;
            };
        };
    };
    "/v1/tags": {
        /** /tags */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Free text search for tag names matching criteria
                     * @example :name
                     */
                    name?: string;
                    /**
                     * @description The number of records returned
                     * @example :limit
                     */
                    limit?: string;
                    /**
                     * @description The cursor returned to from previous page of results
                     * @example :cursor
                     */
                    cursor?: string;
                };
            };
            responses: {
                /** @description Default */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            data?: {
                                id?: string;
                                name?: string;
                            }[];
                            pagination?: {
                                hasMore?: boolean;
                                cursor?: unknown;
                            };
                            total?: number;
                        };
                    };
                };
            };
        };
        /** /tags */
        post: {
            responses: {
                /** @description Default */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            id?: string;
                            name?: string;
                        };
                    };
                };
            };
        };
    };
    "/v1/tags/{tagId}": {
        /** /tags/:tagId */
        delete: {
            parameters: {
                path: {
                    /** @description the id of the tag */
                    tagId: string;
                };
            };
            responses: {
                /** @description Default */
                204: {
                    headers: {};
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
        /** /tags/:tagId */
        patch: {
            parameters: {
                path: {
                    /** @description the id of the tag */
                    tagId: string;
                };
            };
            responses: {
                /** @description Default */
                default: {
                    headers: {};
                    content: {
                        "application/json": {
                            id?: string;
                            name?: string;
                        };
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @description the id of the tag */
                tagId: string;
            };
        };
    };
    "/v1/uploads": {
        /** /uploads */
        post: {
            responses: {
                /** @description Small File (<5G) */
                201: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": {
                            assetId?: string;
                            versionId?: string;
                            /** Format: uri */
                            uploadUrl?: string;
                        };
                    };
                };
            };
        };
    };
    "/v1/uploads/uploadPart": {
        /** uploads/uploadPart */
        post: {
            responses: {
                /** @description Default */
                201: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": {
                            /** Format: uri */
                            url?: string;
                        };
                    };
                };
            };
        };
    };
    "/v1/completeMultipart": {
        /** uploads/completeMultipart */
        post: {
            responses: {
                /** @description Default */
                200: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": Record<string, never>;
                    };
                };
            };
        };
    };
    "/v1/imports": {
        /** /imports */
        post: {
            parameters: {
                header?: {
                    /** @example {{workspaceId}} */
                    "x-air-workspace-id"?: string;
                };
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Without metadata */
                default: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": {
                            id?: string;
                            assetId?: string;
                            versionId?: string;
                        };
                    };
                };
            };
        };
    };
    "/v1/imports/{importId}/status": {
        /** /imports/:importId/status */
        get: {
            parameters: {
                header?: {
                    /** @example {{workspaceId}} */
                    "x-air-workspace-id"?: string;
                };
                path: {
                    /** @example {{import-id}} */
                    importId: string;
                };
            };
            responses: {
                /** @description succeeded */
                default: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": {
                            status?: string;
                        };
                    };
                };
            };
        };
        parameters: {
            path: {
                /** @example {{import-id}} */
                importId: string;
            };
        };
    };
    "/v1/roles": {
        /** /roles */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description (required) to filter the roles by type
                     * @example guest
                     */
                    type?: string;
                };
            };
            responses: {
                /** @description Default */
                200: {
                    headers: {
                        /** @example application/json */
                        "Content-Type"?: string;
                    };
                    content: {
                        "application/json": {
                            data?: {
                                id?: string;
                                name?: string;
                                description?: string;
                                billable?: boolean;
                                type?: string;
                            }[];
                        };
                    };
                };
            };
        };
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AssetVersionMetadata: {
            /** @description The metadata category (e.g., Camera, Creator) */
            category: string;
            /** @description The technical field name */
            fieldName: string;
            /** @description Human-readable label for the field */
            label: string;
            /** @description Data type of the metadata value */
            type: string;
            /** @description The actual metadata value */
            data: string | string[];
        };
        Tag: {
            /**
             * Format: uuid
             * @description Unique identifier for the tag
             */
            id: string;
            /** @description Tag name */
            name: string;
        };
        AssetUrls: {
            /**
             * Format: uri
             * @description URL for the thumbnail image
             */
            thumbnail: string;
            /**
             * Format: uri
             * @description URL for the preview image
             */
            preview: string;
        };
        /**
         * @example {
         *   "id": "ac5eae85-7c54-40f0-a65b-39e32a209254",
         *   "fileName": "ford-gt",
         *   "description": "A ford GT",
         *   "ext": "jpg",
         *   "title": "Ford GT",
         *   "type": "photo",
         *   "createdAt": "2020-10-27 22:17:08.263+00",
         *   "uploadedAt": "2022-11-10 19:45:44.248454+00",
         *   "width": 1870,
         *   "height": 2970,
         *   "size": 656439,
         *   "tags": [
         *     {
         *       "id": "3857116d-b5ce-4f7f-987f-0854b474c459",
         *       "name": "outdoors"
         *     }
         *   ],
         *   "urls": {
         *     "thumbnail": "https://air-prod.imgix.net/3857116d-b5ce-4f7f-987f-0854b474c459.jpg",
         *     "preview": "https://air-prod.imgix.net/3857116d-b5ce-4f7f-987f-0854b474c459.jpg"
         *   },
         *   "metadata": [
         *     {
         *       "category": "Rights",
         *       "fieldName": "CopyrightNotice",
         *       "label": "Copyright Notice",
         *       "type": "string",
         *       "data": "© Copyright 2020 IPTC (Test Images) - www.iptc.org"
         *     },
         *     {
         *       "category": "Rights",
         *       "fieldName": "UsageTerms",
         *       "label": "Usage Terms",
         *       "type": "string",
         *       "data": "All rights reserved. To use this image an explicit license granted by IPTC is required."
         *     }
         *   ]
         * }
         */
        GetAssetVersionResponse: {
            /**
             * Format: uuid
             * @description Unique identifier for the asset version
             */
            id: string;
            /** @description Original file name */
            fileName: string;
            /** @description Asset description */
            description?: string;
            /** @description File extension */
            ext?: string;
            /** @description Asset title */
            title?: string;
            /** @description Asset type (e.g., photo, video, document) */
            type: string;
            /**
             * Format: date-time
             * @description When the asset was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description When the asset was uploaded
             */
            uploadedAt: string;
            /** @description Width in pixels (for images/videos) */
            width?: number;
            /** @description Height in pixels (for images/videos) */
            height?: number;
            /** @description File size in bytes */
            size: number;
            /** @description Asset metadata fields */
            metadata?: components["schemas"]["AssetVersionMetadata"][];
            /** @description Tags associated with the asset */
            tags?: components["schemas"]["Tag"][];
            /** @description URLs for accessing the asset */
            urls: components["schemas"]["AssetUrls"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type external = Record<string, never>;
export interface operations {
    /** @description Get an asset version associated with an asset, including metadata fields like `IPTC` and `EXIF`. */
    getAssetVersion: {
        parameters: {
            path: {
                /** @description the id of the asset */
                assetId: string;
                /** @description the id of the version */
                versionId: string;
            };
        };
        responses: {
            /** @description Default */
            default: {
                headers: {};
                content: {
                    "application/json": components["schemas"]["GetAssetVersionResponse"];
                };
            };
        };
    };
}
